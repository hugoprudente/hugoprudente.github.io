<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hugo Prudente</title>
        <link>https://hugoprudente.github.io/en/posts/</link>
        <description>Recent content in Posts on Hugo Prudente</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Tue, 29 Aug 2023 10:32:57 +0000</lastBuildDate>
        <atom:link href="https://hugoprudente.github.io/en/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Online Talks and Lectures Archive</title>
            <link>https://hugoprudente.github.io/en/posts/online-talks-and-lectures-archive/</link>
            <pubDate>Tue, 29 Aug 2023 10:32:57 +0000</pubDate>
            
            <guid>https://hugoprudente.github.io/en/posts/online-talks-and-lectures-archive/</guid>
            <description>Engeneering Sessions (Carlos Nogueira) WarRoom: Hashcorp adota BSL: OpenTF the Fork Cast:
MC Marcelo Nogueira Fernando Ike Marco Junior (Somatorio) Hugo Prudente Guto Carvalho Video is in Portuguese from Brasil
Pipelines Cast:
MC Marcelo Nogueira Guto Carvalho Hugo Prudente Video is in Portuguese from Brasil
Will WASM replace K8S? Cast:
MC Marcelo Nogueira Daniel Romero (infoslack) Joao Brito (GetUp) Hugo Prudente Video is in Portuguese from Brasil
Metrics &amp;amp; Observability Cast:</description>
            <content type="html"><![CDATA[<h2 id="engeneering-sessions-carlos-nogueira">Engeneering Sessions (Carlos Nogueira)</h2>
<h3 id="warroom-hashcorp-adota-bsl-opentf-the-fork">WarRoom: Hashcorp adota BSL: OpenTF the Fork</h3>
<p>Cast:</p>
<ul>
<li>MC Marcelo Nogueira</li>
<li>Fernando Ike</li>
<li>Marco Junior (Somatorio)</li>
<li>Hugo Prudente</li>
<li>Guto Carvalho</li>
</ul>
<blockquote>
<p>Video is in Portuguese from Brasil</p>
</blockquote>
<iframe width="560" height="315" src="https://www.youtube.com/embed/BU9RdqENgPo?si=fkA354m31sH2CNfX" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<h3 id="pipelines">Pipelines</h3>
<p>Cast:</p>
<ul>
<li>MC Marcelo Nogueira</li>
<li>Guto Carvalho</li>
<li>Hugo Prudente</li>
</ul>
<blockquote>
<p>Video is in Portuguese from Brasil</p>
</blockquote>
<iframe width="560" height="315" src="https://www.youtube.com/embed/wNqeR9O5ay0?si=nTkAgzCksqoFHZ4t" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<h3 id="will-wasm-replace-k8s">Will WASM replace K8S?</h3>
<p>Cast:</p>
<ul>
<li>MC Marcelo Nogueira</li>
<li>Daniel Romero (infoslack)</li>
<li>Joao Brito (GetUp)</li>
<li>Hugo Prudente</li>
</ul>
<blockquote>
<p>Video is in Portuguese from Brasil</p>
</blockquote>
<iframe width="560" height="315" src="https://www.youtube.com/embed/iW7eTFSquaY?si=5fBbiIFQ1LYdvHGt" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<h3 id="metrics--observability">Metrics &amp; Observability</h3>
<p>Cast:</p>
<ul>
<li>MC Marcelo Nogueira</li>
<li>Daniel Requena</li>
<li>Hugo Prudente</li>
<li>Vitor Lobo</li>
</ul>
<blockquote>
<p>Video is in Portuguese from Brasil</p>
</blockquote>
<iframe width="560" height="315" src="https://www.youtube.com/embed/UwuhEn6XXe0?si=UbQEDCm8GfN_GUvj" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<h2 id="linuxtips">LinuxTips</h2>
<h3 id="zuul-ci-with-ansible-nativo">Zuul CI with Ansible Nativo</h3>
<blockquote>
<p>Video is in Portuguese from Brasil</p>
</blockquote>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ETZYDvAYLX4?si=cg6xSdr7nR313So-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<h2 id="jac-lives">Jac lives</h2>
<h3 id="disaster-recovery">Disaster Recovery</h3>
<p>Talk with Guto Carvalho about Disaster Recovery</p>
<blockquote>
<p>Video is in Portuguese from Brasil</p>
</blockquote>
<iframe width="560" height="315" src="https://www.youtube.com/embed/w-wdO4WlFBU?si=sPvwVfrNerM5RHg4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<h2 id="devopsdays">DevOpsDays</h2>
<h3 id="devopsdays-poa-2021---zuul-ci-with-ansible-nativo">DevOpsDays POA 2021 - Zuul CI with Ansible Nativo</h3>
<blockquote>
<p>Video is in Portuguese from Brasil</p>
</blockquote>
<iframe width="560" height="315" src="https://www.youtube.com/embed/d0Akc-Ox4f4?si=jUCkEv4aQcXd5T0z" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>]]></content>
        </item>
        
        <item>
            <title>Managing Secrets During Docker Build</title>
            <link>https://hugoprudente.github.io/en/posts/managing-secrets-during-docker-build/</link>
            <pubDate>Thu, 04 Mar 2021 22:46:31 +0000</pubDate>
            
            <guid>https://hugoprudente.github.io/en/posts/managing-secrets-during-docker-build/</guid>
            <description>What would be the best way to manage my secrets during a docker build?
Checking official and unofficial projects available in hub.docker.com, I have collected the 4 (four) most common cases on how users are storing and managing their secrets.
There are cases that during the build you would use a token or secret file for fetch information from a repo or other application to setup a configuration that will not be possible during runtime.</description>
            <content type="html"><![CDATA[<p>What would be the best way to manage my secrets during a docker build?</p>
<p>Checking official and unofficial projects available in <a href="https://hub.docker.com">hub.docker.com</a>,
I have collected the 4 (four) most common cases on how users are storing and managing their secrets.</p>
<p>There are cases that during the build you would use a token or secret file for fetch information from a
repo or other application to setup a configuration that will not be possible during runtime.</p>
<p>Some of those cases also doesn&rsquo;t fit the multistage building as fetching a package from pip.</p>
<h2 id="scenarios">Scenarios</h2>
<p>I need to install a <code>python</code> using a private pip that I created for this lab.</p>
<p>To achieve that you only need to add <code>pip.conf</code> file as below to <code>/root/.pip/pip.conf</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#66d9ef">[global]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">index-url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">https://hugo.prudente:My$3cr3tP4$$@private.pip/playlist</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">timeout</span><span style="color:#f92672">=</span><span style="color:#e6db74">60</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">extra-index-url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">https://pypi.python.org/simple</span>
</span></span></code></pre></div><p>Looks simple, let&rsquo;s see how we manage it.</p>
<h3 id="method-1">Method 1</h3>
<p>Here we copy the <code>pip.conf</code> to the container and don&rsquo;t remove it on the end.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> pip.conf /root/.pip/pip.conf<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install playlist<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker build -t secret:v1 .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker history secret:v1
</span></span><span style="display:flex;"><span>IMAGE          CREATED              CREATED BY                                      SIZE      COMMENT
</span></span><span style="display:flex;"><span>0d6589d4b95f   About a minute ago   RUN /bin/sh -c pip install playlist <span style="color:#75715e"># bui‚Ä¶   14.1MB    buildkit.dockerfile.v0</span>
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">4</span> minutes ago        COPY pip.conf /root/.pip/pip.conf <span style="color:#75715e"># buildkit    200B      buildkit.dockerfile.v0</span>
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">10</span> days ago          /bin/sh -c <span style="color:#75715e">#(nop)  CMD [&#34;python3&#34;]              0B</span>
</span></span></code></pre></div><p>Let&rsquo;s check if the file on the end of the build is present and it was leaked.</p>
<pre tabindex="0"><code>on ‚õµ k3s (nerdweek) ~/post via üêç v3.9.1 (osx)
‚ùØ docker run -it secret:v1 cat /root/.pip/pip.conf
[global]
index-url = https://hugo.prudente:My$3cr3tP4$$@private.pip/playlist
timeout=60
extra-index-url = https://pypi.python.org/simple
</code></pre><h3 id="method-2">Method 2</h3>
<p>Here we copy the <code>pip.conf</code> to the container and remove it with a <code>RUN</code> statement on the end.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> pip.conf /root/.pip/pip.conf<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install playlist<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> rm /root/.pip/pip.conf<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker build -t secret:v2 .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker history secret:v2
</span></span><span style="display:flex;"><span>IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT
</span></span><span style="display:flex;"><span>42f04cdc6577   <span style="color:#ae81ff">6</span> seconds ago   RUN /bin/sh -c rm /root/.pip/pip.conf <span style="color:#75715e"># buil‚Ä¶   0B        buildkit.dockerfile.v0</span>
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">4</span> minutes ago   RUN /bin/sh -c pip install playlist <span style="color:#75715e"># bui‚Ä¶   14.1MB    buildkit.dockerfile.v0</span>
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">7</span> minutes ago   COPY pip.conf /root/.pip/pip.conf <span style="color:#75715e"># buildkit    200B      buildkit.dockerfile.v0</span>
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">10</span> days ago     /bin/sh -c <span style="color:#75715e">#(nop)  CMD [&#34;python3&#34;]              0B</span>
</span></span></code></pre></div><p>Let&rsquo;s check again if the file was present.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker run -it secret:v2 cat /root/.pip/pip.conf
</span></span><span style="display:flex;"><span>cat: /root/.pip/pip.conf: No such file or directory
</span></span></code></pre></div><h3 id="method-3">Method 3</h3>
<p>Here we copy the <code>pip.conf</code> to the container and remove it in the same <code>RUN</code> statement as the <code>pip install</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> pip.conf /root/.pip/pip.conf<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install playlist <span style="color:#f92672">&amp;&amp;</span> rm /root/.pip/pip.conf<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker build -t secret:v3 .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker history secret:v3
</span></span><span style="display:flex;"><span>IMAGE          CREATED              CREATED BY                                      SIZE      COMMENT
</span></span><span style="display:flex;"><span>a2bf2672abaf   About a minute ago   RUN /bin/sh -c pip install playlist <span style="color:#f92672">&amp;&amp;</span> rm‚Ä¶   14.1MB    buildkit.dockerfile.v0
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">17</span> minutes ago       COPY pip.conf /root/.pip/pip.conf <span style="color:#75715e"># buildkit    200B      buildkit.dockerfile.v0</span>
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">10</span> days ago          /bin/sh -c <span style="color:#75715e">#(nop)  CMD [&#34;python3&#34;]              0B</span>
</span></span></code></pre></div><p>Let&rsquo;s check once more if the file was present.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker run -it secret:v3 cat /root/.pip/pip.conf
</span></span><span style="display:flex;"><span>cat: /root/.pip/pip.conf: No such file or directory
</span></span></code></pre></div><h3 id="method-4">Method 4</h3>
<p>Here we create the <code>pip.conf</code> using the <code>generate.sh</code> script that receive the
<code>SECRET</code> as <code>ARG</code> with the <code>--build-arg</code> options and we remove it on the same <code>RUN</code> statement.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>SECRET<span style="color:#f92672">=</span>$1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mkdir -p /root/.pip
</span></span><span style="display:flex;"><span>cat &gt; /root/.pip/pip.conf <span style="color:#e6db74">&lt;&lt; EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">[global]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">index-url = https://hugo.prudente:${SECRET}@private.pip/playlist
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">timeout=60
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">extra-index-url = https://pypi.python.org/simple
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> SECRET<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> generate.sh /generate.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> /generate.sh <span style="color:#e6db74">${</span>SECRET<span style="color:#e6db74">}</span> <span style="color:#f92672">&amp;&amp;</span> pip install playlist <span style="color:#f92672">&amp;&amp;</span> rm /root/.pip/pip.conf<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker build -t secret:v4 --progress plain --build-arg SECRET<span style="color:#f92672">=</span>My$3cr3tP4$$ .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚ûú on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker history -H secret:v4
</span></span><span style="display:flex;"><span>IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT
</span></span><span style="display:flex;"><span>d2ca3623139f   <span style="color:#ae81ff">2</span> minutes ago   RUN |<span style="color:#ae81ff">1</span> SECRET<span style="color:#f92672">=</span>My$3cr3tP4$$ /b‚Ä¶   14.1MB    buildkit.dockerfile.v0
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">2</span> minutes ago   COPY generate.sh /generate.sh <span style="color:#75715e"># buildkit        261B      buildkit.dockerfile.v0</span>
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">2</span> minutes ago   ARG SECRET                                      0B        buildkit.dockerfile.v0
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">10</span> days ago     /bin/sh -c <span style="color:#75715e">#(nop)  CMD [&#34;python3&#34;]              0B</span>
</span></span></code></pre></div><p>Last but not least, let&rsquo;s check the presece of the file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ùØ docker run -it secret:v4 cat /root/.pip/pip.conf
</span></span><span style="display:flex;"><span>cat: /root/.pip/pip.conf: No such file or directory
</span></span></code></pre></div><p>The credential is not on the <code>pip.conf</code> file but it&rsquo;s visible during the <code>docker history</code>.</p>
<h3 id="preliminary-results">Preliminary Results</h3>
<p>Here is a matrix on where our secrets have been leaked.</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:center">Runtime</th>
<th style="text-align:right">Inspection</th>
</tr>
</thead>
<tbody>
<tr>
<td>secret:v1</td>
<td style="text-align:center"><span style="color:red">Yes</span></td>
<td style="text-align:right"><span style="color:green">No</span></td>
</tr>
<tr>
<td>secret:v2</td>
<td style="text-align:center"><span style="color:green">No</span></td>
<td style="text-align:right"><span style="color:green">No</span></td>
</tr>
<tr>
<td>secret:v3</td>
<td style="text-align:center"><span style="color:green">No</span></td>
<td style="text-align:right"><span style="color:green">No</span></td>
</tr>
<tr>
<td>secret:v4</td>
<td style="text-align:center"><span style="color:green">No</span></td>
<td style="text-align:right"><span style="color:red">Yes</span></td>
</tr>
</tbody>
</table>
<p>With the preliminary results we can already exclude methods 1 and 4 as we can
consider them insecure due to the credentials being visible at some point.</p>
<p>The method 4, I also used <code>--build-args SECRET=${SECRET}</code> and the secrets
leaks on the same way.</p>
<h2 id="dive-deep">Dive Deep</h2>
<h3 id="overlayfs">OverlayFS</h3>
<p>Is the kernel implementation for a union-filesystem, an overlay-filesystem tries
to present a filesystem which is the result over overlaying one filesystem on
top of the other.</p>
<p><img src="/2021/03/overlayfs.png" alt="overlayfs.png"></p>
<p>In short taking the example of the image above imagine you have 2 directories
the <strong>lower</strong> and <strong>upper</strong> where the <strong>lower</strong> is a read-only directory for the
consumer, but they are still read-write from the Linux Operational system.</p>
<p>When a file is modified on the <strong>upper</strong> the change happens normally but if a
change is made on a file of the <strong>lower</strong> directory a copy of it is created on the
<strong>upper</strong> to become accessible, once the modification is complete another
process is responsible to fetch the modification and write on the <strong>lower</strong>
directory.</p>
<p>So this union of directories merged together as one unique block limited by the
cgroups is what docker and it&rsquo;s storage driver uses on our example.</p>
<p>The AUFS that&rsquo;s also a union-filesystem also presents the same behaviour,
although some of locations may be slightly different.</p>
<h3 id="checking-the-filesystem">Checking the Filesystem</h3>
<p>Now that I know how OverlayFS works let&rsquo;s isolate the directories (layers) used
by the <code>python:latest</code> so we can filter out only the ones that we are interested
on, the ones that have <code>pip.conf</code> file.</p>
<p>Inspect the containers I can find the directories used on the OverlayFS.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker inspect python:latest | grep Dir | grep -Eo <span style="color:#e6db74">&#34;([a-z0-9]{25,64})&#34;</span>
</span></span><span style="display:flex;"><span>9e7c768dda91c4fa7ed6a57c7cb784834033bff92bd11ff6d062d4de11c0f898
</span></span><span style="display:flex;"><span>17bf53c98685ae36487eb55f0d2256d168f210a688ef51deef760de1a699cbdf
</span></span><span style="display:flex;"><span>4cb1dbbf58a2b1ca8df6d9d977a66fe918aee21434fcd656f1a68f1f412d75ff
</span></span><span style="display:flex;"><span>358dd0944f115e2a273c5259dd1432b44e36908cf223f8ce0d9f74550430f577
</span></span><span style="display:flex;"><span>c034592b1a26552525742ed81e7fbce2139817b634d48db8349dbebf15a45914
</span></span><span style="display:flex;"><span>19d471e0407c0f1ca14eb1cb8c46aaef9357037cad5dc170cb6a4af3c1feab40
</span></span><span style="display:flex;"><span>e005796f193e62e9db78de1df20999daca1a96a0bebed19c1dd906b1b4da8542
</span></span><span style="display:flex;"><span>badc6aa65b2d3f10b0cdff3fc04bf3a64b551af1dd9e01b6ecd38ed71abdc3da
</span></span><span style="display:flex;"><span>8d6ff96b718838005288a94cdc9fd408d1f70d7e9cbab678ebeb4521d11b366d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker inspect python:latest | grep Dir | grep -Eo <span style="color:#e6db74">&#34;([a-z0-9]{25,64})&#34;</span> &gt; layers.python
</span></span></code></pre></div><p>With the layers saved in the file <code>layers.python</code> I can use a similar command to
exclude the know python layers and get only the ones added by our build.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker inspect secret:v1 | grep Dir | grep -Eo <span style="color:#e6db74">&#34;([a-z0-9]{25,64})&#34;</span> | grep -v -f layers.python  | uniq
</span></span><span style="display:flex;"><span>e1kq2j71b7clcwtn0lbmqa1g9
</span></span><span style="display:flex;"><span>v6zy2xgzrow2mgpyq9d0vch6l
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚ûú docker inspect secret:v2 | grep Dir | grep -Eo <span style="color:#e6db74">&#34;([a-z0-9]{25,64})&#34;</span> | grep -v -f layers.python  | uniq
</span></span><span style="display:flex;"><span>v6zy2xgzrow2mgpyq9d0vch6l
</span></span><span style="display:flex;"><span>e1kq2j71b7clcwtn0lbmqa1g9
</span></span><span style="display:flex;"><span>oudofb9c0iaqog9sff81f8053
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker inspect secret:v3 | grep Dir | grep -Eo <span style="color:#e6db74">&#34;([a-z0-9]{25,64})&#34;</span> | grep -v -f layers.python  | uniq
</span></span><span style="display:flex;"><span>e1kq2j71b7clcwtn0lbmqa1g9
</span></span><span style="display:flex;"><span>hqsrze873a2uz7tjsgbqdo3sd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker inspect secret:v4 | grep Dir | grep -Eo <span style="color:#e6db74">&#34;([a-z0-9]{25,64})&#34;</span> | grep -v -f layers.python  | uniq
</span></span><span style="display:flex;"><span>78gz619okusgrq4jo4ek863ug
</span></span><span style="display:flex;"><span>oq22x88p26hzqmr1w1qpf8mm4
</span></span></code></pre></div><p>Now that we have the layers I have created a list just to make it simpler to
find it when we check the directory.</p>
<h4 id="accessing-the-overlayfs-directories">Accessing the OverlayFS directories</h4>
<p>Using one of the commands below as root you will find the entry point where
Docker Storage driver creates the file-system hierarchy used by the whole
eco-system.</p>
<p><strong>Linux</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd /var/lib/docker/
</span></span></code></pre></div><p><strong>MacOS</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -it --rm --privileged --pid<span style="color:#f92672">=</span>host justincormack/nsenter1
</span></span><span style="display:flex;"><span>cd /var/lib/docker/
</span></span></code></pre></div><p>Once in the <code>/var/lib/docker</code> directory using a simple <code>ls</code> and filtering the
layers previous stored in the temporary file and expanding it I could find the
specific layers that have the <code>pip.conf</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/var/lib/docker/overlay2 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ls | grep -f /tmp/layers | xargs find | grep pip.conf</span>
</span></span><span style="display:flex;"><span>e1kq2j71b7clcwtn0lbmqa1g9/diff/root/.pip/pip.conf
</span></span><span style="display:flex;"><span>hqsrze873a2uz7tjsgbqdo3sd/diff/root/.pip/pip.conf
</span></span><span style="display:flex;"><span>oudofb9c0iaqog9sff81f8053/diff/root/.pip/pip.conf
</span></span></code></pre></div><p>So I accessed each of of those to confirm if the file was present or if was just
its shadow left by the directory union.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/var/lib/docker/overlay2 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cat e1kq2j71b7clcwtn0lbmqa1g9/diff/root/.pip/pip.conf</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>global<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>index-url <span style="color:#f92672">=</span> https://hugo.prudente:My$3cr3tP4$$@private.pip/playlist
</span></span><span style="display:flex;"><span>timeout<span style="color:#f92672">=</span><span style="color:#ae81ff">60</span>
</span></span><span style="display:flex;"><span>extra-index-url <span style="color:#f92672">=</span> https://pypi.python.org/simpl
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/var/lib/docker/overlay2 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cat hqsrze873a2uz7tjsgbqdo3sd/diff/root/.pip/pip.conf</span>
</span></span><span style="display:flex;"><span>cat: can<span style="color:#ae81ff">\&#39;</span>t open <span style="color:#e6db74">&#39;hqsrze873a2uz7tjsgbqdo3sd/diff/root/.pip/pip.conf&#39;</span>: No such device or address
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/var/lib/docker/overlay2 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cat oudofb9c0iaqog9sff81f8053/diff/root/.pip/pip.conf</span>
</span></span><span style="display:flex;"><span>cat: can<span style="color:#ae81ff">\&#39;</span>t open <span style="color:#e6db74">&#39;oudofb9c0iaqog9sff81f8053/diff/root/.pip/pip.conf&#39;</span>: No such device or address
</span></span></code></pre></div><p>So 1 of 3 layers have the file present so I have checked from which container
that layer belong to and here&rsquo;s the surprise.</p>
<p>That 1 layer is shared with 3 of 4 builds that we have created, meaning that
during a <code>docker pull</code> three diferente containers could leak my <code>pip.conf</code>
secret.</p>
<h2 id="results">Results</h2>
<p>The updated matrix consolidating the results on where our secrets have leaked.</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:center">Runtime</th>
<th style="text-align:right">Inspection</th>
<th style="text-align:right">OverlayFS</th>
</tr>
</thead>
<tbody>
<tr>
<td>secret:v1</td>
<td style="text-align:center">Yes</td>
<td style="text-align:right">No</td>
<td style="text-align:right">Yes</td>
</tr>
<tr>
<td>secret:v2</td>
<td style="text-align:center">No</td>
<td style="text-align:right">No</td>
<td style="text-align:right">Yes</td>
</tr>
<tr>
<td>secret:v3</td>
<td style="text-align:center">No</td>
<td style="text-align:right">No</td>
<td style="text-align:right">Yes</td>
</tr>
<tr>
<td>secret:v4</td>
<td style="text-align:center">NO</td>
<td style="text-align:right">Yes</td>
<td style="text-align:right">No</td>
</tr>
</tbody>
</table>
<p>So even knowing that the file is not acessible from the container directly if
you have access to pull the container on a full read-write system you would be
able to retreive the secrets.</p>
<p>But now what&rsquo;s the best way to build the container and do not have such issue?</p>
<h2 id="solution">Solution</h2>
<p>From 18.09 or newer Docker have introduced the Docker BuildKit that brings some
extra funcionality to the Docker builds.</p>
<p>The builds using BuildKit different from the legacy allows the usage of the
<code>--secret</code> that allows the capacity of binding a file during build runtime
similar to the tradicional runtime that we achieve with <code>-v</code> option.</p>
<p>It&rsquo;s usage is quite simple let&rsquo;s build a container and run our tests again.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> --mount<span style="color:#f92672">=</span>type<span style="color:#f92672">=</span>secret,id<span style="color:#f92672">=</span>pip.conf,dst<span style="color:#f92672">=</span>/root/.pip/pip.conf <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>      pip install playlist<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker build --file Dockerfile  --secret id<span style="color:#f92672">=</span>pip.conf,src<span style="color:#f92672">=</span>pip.conf -t secret:v5 .
</span></span></code></pre></div><p>Now that we have the <code>secret:v5</code> build lets confirm.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ûú docker history secret:v5
</span></span><span style="display:flex;"><span>IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT
</span></span><span style="display:flex;"><span>266a21bb36ae   <span style="color:#ae81ff">36</span> seconds ago   RUN /bin/sh -c pip install playlist <span style="color:#75715e"># bui‚Ä¶   14.1MB    buildkit.dockerfile.v0</span>
</span></span><span style="display:flex;"><span>&lt;missing&gt;      <span style="color:#ae81ff">11</span> days ago      /bin/sh -c <span style="color:#75715e">#(nop)  CMD [&#34;python3&#34;]              0Bi</span>
</span></span></code></pre></div><p>The history in this case is clean, not even mention the mount for <code>pip.conf</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ùØ docker run -it secret:v5 cat /root/.pip/pip.conf
</span></span><span style="display:flex;"><span>cat: /root/.pip/pip.conf: No such file or directory
</span></span></code></pre></div><p>The file is also not present on the system.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>‚ùØ docker inspect secret:v5 | grep Dir | grep -Eo <span style="color:#e6db74">&#34;([a-z0-9]{25,64})&#34;</span> | grep -v -f layers.python  | uniq
</span></span><span style="display:flex;"><span>cnpw0dw9o05lmdz3j9j62jzpt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>on ‚õµ k3s <span style="color:#f92672">(</span>nerdweek<span style="color:#f92672">)</span> ~/post via üêç v3.9.1 <span style="color:#f92672">(</span>osx<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>/var/lib/docker/overlay2 <span style="color:#75715e"># </span>
</span></span><span style="display:flex;"><span>ls cnpw0dw9o05lmdz3j9j62jzpt | xargs find | grep pip.conf
</span></span><span style="display:flex;"><span>find: committed: No such file or directory
</span></span><span style="display:flex;"><span>find: diff: No such file or directory
</span></span><span style="display:flex;"><span>find: link: No such file or directory
</span></span><span style="display:flex;"><span>find: lower: No such file or directory
</span></span><span style="display:flex;"><span>find: work: No such file or directory
</span></span></code></pre></div><p>And the most important one the file doesn&rsquo;t exist on the layer/directory that we just
created meaning that if we use in a base image our scretes are safe.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://docs.docker.com/develop/develop-images/build_enhancements/">https://docs.docker.com/develop/develop-images/build_enhancements/</a></li>
<li><a href="https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html">https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html</a></li>
<li><a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">https://docs.docker.com/storage/storagedriver/overlayfs-driver/</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Using AWS Network ACLs With NAT Gateway</title>
            <link>https://hugoprudente.github.io/en/posts/using-aws-network-acls-with-natgateway/</link>
            <pubDate>Sat, 11 Jul 2020 13:09:21 +0200</pubDate>
            
            <guid>https://hugoprudente.github.io/en/posts/using-aws-network-acls-with-natgateway/</guid>
            <description>It‚Äôs quite common the mistakes made when using the AWS Network ACLs for adding that extra layer of security in your VPC.
Given the fact that Network ACLs are stateless, meaning that the Inbound (Ingress) should have a matching rule for Outbound (Egress).
With this post, you will learn how to identify such particularities using an AWS ElasticBeanstalk environment as an example, due to its sensitivity regarding network access requirements.</description>
            <content type="html"><![CDATA[<p>It‚Äôs quite common the mistakes made when using the AWS Network ACLs for adding that extra layer of security in your VPC.</p>
<p>Given the fact that Network ACLs are <strong>stateless</strong>, meaning that the Inbound (Ingress) should have a matching rule for Outbound (Egress).</p>
<p>With this post, you will learn how to identify such particularities using an AWS ElasticBeanstalk environment as an example, due to its sensitivity regarding network access requirements.</p>
<h2 id="common-issues">Common Issues</h2>
<ul>
<li>Fail to access any HTTPS/TLS endpoint resulting in timeout</li>
<li>Fail to sync NTP servers</li>
</ul>
<h2 id="difference-between-security-group-and-network-acl-nacl">Difference between Security Group and Network ACL (NACL)</h2>
<p>The main difference between the Security Group and the Network ACL (NACL) is the
the context where they are applied and the type of rules they provided.</p>
<ul>
<li>
<p>A Security Group:
Stateful: Therefore you don&rsquo;t need a rule that allows response traffic for inbound requests.
Local: Therefore it applies only to the instance or service to which the security group is attached to.</p>
</li>
<li>
<p>A Network ACL:
Stateless: Therefore this rule is required to allow response traffic for inbound requests on the outbound rules.
Global: Therefore it applies to all services that are placed on the subnet that is attached to.</p>
</li>
</ul>
<p><img src="/2020/11/nacl-example-diagram.png" alt="itlandscape.png"></p>
<h2 id="scenario-1---web-tier-public-subnet-with-network-acl-without-aws-nat-gateway">Scenario 1 - (Web Tier) Public Subnet with Network ACL without AWS NAT Gateway.</h2>
<p>Using the diagram below as an example to configure the Network ACL&rsquo;s for an ElasticBeanstalk environment.</p>
<p>Diagram:</p>
<pre tabindex="0"><code>+------------------+
|                  |
|   +----------+   |
|   | INSTANCE |   |
|   +----------+   |
|   |  SG-001  |   |
|   +----------+   |
+------------------+
|    Subnet Pub    |
+------------------+
         +   +--------------+
         |---| ACL-001      |
         v   +--------------+
+------------------+
|       IGW        |
+------------------+
</code></pre><p>As presented on the common issues, the simplified flow for UDP and HTTPS TCPDump packet below displays the return of 2 (two) actions from the EC2 belonging to the ElasticBeanstalk test environment.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>UDP 172.31.0.31:123 &gt; 0.amazon.pool.ntp.org
</span></span><span style="display:flex;"><span>UDP 0.amazon.pool.ntp.org &gt; 172.31.0.31:2000
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>TCP 172.31.0.31:443 &gt; aws.amazon.com
</span></span><span style="display:flex;"><span>TCP aws.amazon.com &gt; 172.31.0.31:3000
</span></span></code></pre></div><p>As we notice from the packet analysis the returning port is ephemeral and as we already know that Network ACL are stateless we need to account for that during the rules creation. Due to the Security Group being stateful, the above behavior will work properly.</p>
<h3 id="solution">Solution</h3>
<p>The solution, in this case, is a mix between the Security Group (SG-001) and the Network ACLs (ACL-001) where we can see:</p>
<p><em><strong>Security Group</strong></em> presents inbound traffic for TCP/HTTP, TCP/HTTPS for standard ports 80 and 443 from everywhere and outbound traffic from the instance to everywhere.</p>
<h4 id="security-group-inbound-rule-sg-001">Security Group Inbound Rule (SG-001)</h4>
<pre tabindex="0"><code>Type  |Protocol |Port Range |Source
--------|-----------|-----------|------
HTTP  |TCP  |80 |0.0.0.0/0
HTTPS |TCP  |443  |0.0.0.0/0
</code></pre><h4 id="security-group-outbound-rule-sg-001">Security Group Outbound Rule (SG-001)</h4>
<pre tabindex="0"><code>Type  |Protocol |Port Range |Source
--------|-----------|-----------|------
All |Traffic  |ALL  |ALL  |0.0.0.0/0
</code></pre><h4 id="network-acl-inbound-acl-001">Network ACL Inbound (ACL-001)</h4>
<pre tabindex="0"><code>Rule #  Type  Protocol  Port Range  Destination Allow / Deny
102 HTTP (80) TCP (6) 80  0.0.0.0/0 ALLOW
103 HTTPS (443) TCP (6) 443 0.0.0.0/0 ALLOW
201 Custom TCP Rule TCP (6) 1024-65535  0.0.0.0/0 ALLOW
202 Custom UDP Rule UDP (17)  123 0.0.0.0/0 ALLOW
* ALL Traffic ALL ALL 0.0.0.0/0 DENY
</code></pre><h4 id="network-acl-outbond-acl-001">Network ACL Outbond (ACL-001)</h4>
<pre tabindex="0"><code>Rule #  Type  Protocol  Port Range  Destination Allow / Deny
101 HTTP (80) TCP (6) 80  0.0.0.0/0 ALLOW
202 HTTPS (443) TCP (6) 443 0.0.0.0/0 ALLOW
102 Custom TCP Rule TCP (6) 1024-65535  0.0.0.0/0 ALLOW
103 Custom UDP Rule)  UDP (17)  1024-65535  0.0.0.0/0 ALLOW
* ALL Traffic ALL ALL 0.0.0.0/0 DENY
</code></pre><p>As we know that ElasticBeanstalk does more than serve traffic but also has agents that connect to AWS API&rsquo;s we notice two different sets of configurations in the Network ACL&rsquo;s.</p>
<ul>
<li>Rules 102 and 103 allow inbound traffic for ports 80 and 443 following by its outbound pair, the 102 and 103 that are responsible to allow ephemeral port out to answer the requests.</li>
<li>Rules 202 and 203 are using in the reverse order, an agent will post from the EC2 to AWS API, we analyze it inverting the tables. In this case, outbound requires 80 and 443 for the request, and the response will return in an ephemeral port on the inbound rules.</li>
</ul>
<h2 id="scenario-2---worker-tier-private-subnet-with-network-acl-and-aws-nat-gateway">Scenario 2 - (Worker Tier) Private Subnet with Network ACL and AWS NAT Gateway.</h2>
<p>Again using the diagram below as an example to configure the Network ACL&rsquo;s for an ElasticBeanstalk environment.</p>
<p>Diagram:</p>
<pre tabindex="0"><code>+------------------+
|                  |
|   +----------+   |
|   | INSTANCE |   |
|   +----------+   |
|   |  SG-002  |   |
|   +----------+   |
+------------------+
|  Subnet Private  |
+------------------+
          +
          |   +--------------+
          |---| ACL-002      |
          v   +--------------+
+------------------+
|                  |
|   +----------+   |
|   |  NAT GW  |   |
|   |  SG-002  |   |
|   +----------+   |
+------------------+
|    Subnet Pub    |
+------------------+
         +   +--------------+
         |---| ACL-003      |
         v   +--------------+
+------------------+
|       IGW        |
+------------------+
</code></pre><p>Same as before as presented on the common issues, the simplified flow for UDP and HTTPS TCPDump packet below displays the return of 2 (two) actions from the EC2 belonging to the ElasticBeanstalk test environment.</p>
<pre tabindex="0"><code>UDP 172.31.0.31:123 &gt; 172.31.0.34:2000
UDP 172.31.0.34:2000 &gt; 0.amazon.pool.ntp.org
UDP 0.amazon.pool.ntp.org &gt; 172.31.0.34:2000
UDP 172.31.0.34:2000 &gt; 172.31.0.31:3000
 
TCP 172.31.0.31:443 &gt; 172.31.0.33:2000
TCP 172.31.0.33:2000 &gt; aws.amazon.com
TCP aws.amazon.com &gt; 172.31.0.33:3000
TCP 172.31.0.33:3000 &gt; 172.31.0.31:3000
</code></pre><p>We can see that this is a little bit different than before, now 4 (four) pairs of packets with a extra jump returning different ports for each pair.</p>
<p>It happens due to a particular behavior of the AWS NAT Gateway. AWS Nat Gateway encapsulates packets to achieve higher performance, causing the change on the packet header during its life cycle.</p>
<h3 id="solution-1">Solution</h3>
<p>The solution, in this case, is a also a mix between the Security Group (SG-002) and the Network ACLs but this case ACL-002 and ACL-003 where we can see:</p>
<h4 id="security-group-inbound-rule-sg-002">Security Group Inbound Rule (SG-002)</h4>
<pre tabindex="0"><code>Type  Protocol  Port Range  Source
HTTP  TCP 80  0.0.0.0/0
Custom UDP  UDP 123 0.0.0.0/0
Custom UDP  UDP 1024-65535  0.0.0.0/0
Security Group Outbond Rule (SG-002)
Type  Protocol  Port Range  Source
All Traffic ALL ALL 0.0.0.0/0
</code></pre><h4 id="network-acl-inbound---private-subnet-acl-002">Network ACL Inbound - Private Subnet (ACL-002)</h4>
<pre tabindex="0"><code>Rule #  Type  Protocol  Port Range  Destination Allow / Deny
102 HTTP (80) TCP (6) 80  0.0.0.0/0 ALLOW
103 HTTPS (443) TCP (6) 443 0.0.0.0/0 ALLOW
202 Custom TCP Rule TCP (6) 1024-65535  0.0.0.0/0 ALLOW
203 Custom UDP Rule UDP (17)  123 0.0.0.0/0 ALLOW
* ALL Traffic ALL ALL 0.0.0.0/0 DENY
</code></pre><h4 id="network-acl-outbond---private-subnet-acl-002">Network ACL Outbond - Private Subnet (ACL-002)</h4>
<pre tabindex="0"><code>Rule #  Type  Protocol  Port Range  Destination Allow / Deny
202 HTTP (80) TCP (6) 80  0.0.0.0/0 ALLOW
203 HTTPS (443) TCP (6) 443 0.0.0.0/0 ALLOW
102 Custom TCP Rule TCP (6) 1024-65535  0.0.0.0/0 ALLOW
103 Custom UDP Rule)  UDP (17)  1024-65535  0.0.0.0/0 ALLOW
* ALL Traffic ALL ALL 0.0.0.0/0 DENY
</code></pre><h4 id="network-acl-inbound---public-subnet-acl-003">Network ACL Inbound - Public Subnet (ACL-003)</h4>
<pre tabindex="0"><code>Rule #  Type  Protocol  Port Range  Destination Allow / Deny
102 HTTP (80) TCP (6) 80  0.0.0.0/0 ALLOW
103 HTTPS (443) TCP (6) 443 0.0.0.0/0 ALLOW
202 Custom TCP Rule TCP (6) 1024-65535  0.0.0.0/0 ALLOW
203 Custom UDP Rule UDP (17)  123 0.0.0.0/0 ALLOW
* ALL Traffic ALL ALL 0.0.0.0/0 DENY
</code></pre><h4 id="network-acl-outbond---public-subnet-acl-003">Network ACL Outbond - Public Subnet (ACL-003)</h4>
<pre tabindex="0"><code>Rule #  Type  Protocol  Port Range  Destination Allow / Deny
202 HTTP (80) TCP (6) 80  0.0.0.0/0 ALLOW
203 HTTPS (443) TCP (6) 443 0.0.0.0/0 ALLOW
102 Custom TCP Rule TCP (6) 1024-65535  0.0.0.0/0 ALLOW
103 Custom UDP Rule)  UDP (17)  1024-65535  0.0.0.0/0 ALLOW
* ALL Traffic ALL ALL 0.0.0.0/0 DENY
</code></pre><p>Again we have the rule set for the Network ACL where.</p>
<ul>
<li>ACL-002 Rules 102 and 103 allow inbound traffic for ports 80 and 443 following by its outbound pair, the 102 and 103 that are responsible to allow ephemeral port out to answer the requests.</li>
<li>ACL-002 Rules 202 and 203 are using in the reverse order, an agent will post from the EC2 to AWS API, we analyze it inverting the tables. In this case, outbound requires 80 and 443 for the request, and the response will return in an ephemeral port on the inbound rules.</li>
<li>We would expect only outbound traffic for the NAT Gateway, but due to the encapsulation, NAT Gateway is opening a new TCP connection with the backend using the new port requiring the same set as before.</li>
</ul>
<p>These problems only happen if you tight the security on the Network ACL used by the AWS Natgateway, as the AWS default NACL that allows all the traffic inbound and outbound.</p>
<p>References:</p>
<ul>
<li><a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">AWS User Guide for VPC ACLs</a></li>
<li><a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">AWS User Guide for VPC NAT Gateway</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Kubernetes Nginx Ingress Controller vs Nginx Ingress Controller for Kubernetes</title>
            <link>https://hugoprudente.github.io/en/posts/kubernetes-nginx-ingress-controller-vs-nginx-ingress-controller-for-kubernetes/</link>
            <pubDate>Tue, 21 Jan 2020 21:23:25 +0000</pubDate>
            
            <guid>https://hugoprudente.github.io/en/posts/kubernetes-nginx-ingress-controller-vs-nginx-ingress-controller-for-kubernetes/</guid>
            <description>Quite often I&amp;rsquo;m seeing people having trouble using the Kubernetes Ingress Controller featuring Nginx.
The principal issue reported by the community is the annotation nginx.ingress.kubernetes.io/rewrite-target: / not working.
The cause of the not working tag is the the ingres-controller being used. Let me clarify!
Commonly we go to google.com and search for the key works &amp;ldquo;kuberentes ingress controller&amp;rdquo;, this will return two oficial projects, by different companies.
NGINX Ingress Controller for Kubernetes by NGINX Kubernetes Nginx Ingress Controller by Kubernetes (Google) During the troubleshoot the first thing that we must define is which ingress-controller for Nginx is being used:</description>
            <content type="html"><![CDATA[<p>Quite often I&rsquo;m seeing people having trouble using the <strong>Kubernetes Ingress Controller</strong> featuring <strong>Nginx</strong>.</p>
<p>The principal issue reported by the community is the annotation <code>nginx.ingress.kubernetes.io/rewrite-target: /</code> not working.</p>
<p>The cause of the not working <em>tag</em> is the the <code>ingres-controller</code> being used. Let me clarify!</p>
<p>Commonly we go to <code>google.com</code> and search for the key works &ldquo;kuberentes ingress controller&rdquo;, this will return two <strong>oficial</strong> projects, by different companies.</p>
<ul>
<li><a href="https://docs.nginx.com/nginx-ingress-controller/">NGINX Ingress Controller for Kubernetes</a> by NGINX</li>
<li><a href="https://kubernetes.github.io/ingress-nginx/">Kubernetes Nginx Ingress Controller</a> by Kubernetes (Google)</li>
</ul>
<p>During the troubleshoot the first thing that we must define is which <code>ingress-controller</code> for <strong>Nginx</strong> is being used:</p>
<p>With <strong>helm</strong> we can check from the repository that it was installed from:</p>
<p>Provided by NGINX</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>‚óã ‚Üí helm repo add nginx-stable https://helm.nginx.com/stable
</span></span><span style="display:flex;"><span>‚óã ‚Üí helm search hub nginx-ingress
</span></span><span style="display:flex;"><span>URL                                                     CHART VERSION   APP VERSION     DESCRIPTION                                       
</span></span><span style="display:flex;"><span>https://hub.helm.sh/charts/nginx/nginx-ingress          0.4.1           1.6.1           NGINX Ingress Controller                          
</span></span></code></pre></div><p>Provided by Kubernetes</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>‚óã ‚Üí helm repo add stable https://kubernetes-charts.storage.googleapis.com
</span></span><span style="display:flex;"><span>‚óã ‚Üí helm search hub nginx-ingress
</span></span><span style="display:flex;"><span>URL                                                     CHART VERSION   APP VERSION     DESCRIPTION                                       
</span></span><span style="display:flex;"><span>https://hub.helm.sh/charts/stable/nginx-ingress         1.29.3          0.27.1          An nginx Ingress controller that uses ConfigMap...
</span></span></code></pre></div><p>Alternatively if the solution was not deployed using <strong>Helm</strong> you can define the origin of the <code>ingres-controller</code> project by check the container image using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>‚óã ‚Üí kubectl describe deployment  | grep Image
</span></span><span style="display:flex;"><span>    Image:       quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.27.1
</span></span><span style="display:flex;"><span>    Image:       nginx/nginx-ingress:1.6.1
</span></span></code></pre></div><p>From the <a href="https://github.com/nginxinc/kubernetes-ingress/">NGINX Ingress Controller for Kubernetes</a>, GitHub page we can confirm the ownership of the image <strong>nginx-ingress:1.6.1</strong>.</p>
<p>From the <a href="https://github.com/kubernetes/ingress-nginx/">Kubernetes Nginx Ingress Controller</a>, GitHub page we can also confirm that the ownership of image <strong>nginx-ingress-controller:0.27.1</strong>.</p>
<p>Now that we defined the used project we can move forward with it&rsquo;s configuration:</p>
<h1 id="nginx-ingress-controller-for-kubernetes">NGINX Ingress Controller for Kubernetes</h1>
<p>Maintained by NGINX the documentation can be found here on <a href="https://docs.nginx.com/nginx-ingress-controller/">Nginx Ingress Controller for Kubernetes</a>:</p>
<p>The tags for the this projects are <code>nginx.org</code> and <code>nginx.com</code> for the paid extra features.</p>
<p>Examples exploring the features of this project can be found here on the <a href="https://github.com/nginxinc/kubernetes-ingress/tree/v1.6.1/examples">GitHub</a></p>
<p>Example for rewrite feature:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">extensions/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cafe-ingress</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">nginx.org/rewrites</span>: <span style="color:#e6db74">&#34;serviceName=tea-svc rewrite=/&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">host</span>: <span style="color:#ae81ff">cafe.example.com</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tea/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">tea-svc</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><h1 id="kubernetes-nginx-ingress-controller">Kubernetes NGINX Ingress Controller</h1>
<p>Maintained by the Kubernetes community, the documentation can be found her on <a href="https://kubernetes.github.io/ingress-nginx/">Kubernetes Nginx Ingress Controller</a>:</p>
<p>The tags for this project is <code>nginx.ingress.kubernetes.io/</code> and has no extra features.</p>
<p>Examples exploring the features of this project can be found here on the <a href="https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples">GitHub</a></p>
<p>Example for rewrite feature:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cafe-ingress</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">nginx.ingress.kubernetes.io/rewrite-target</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tea</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">tea-svc</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><hr>
<p>The projects are a couple months difference from each other and there&rsquo;s no clear explanation on why the Kuberenetes Ingress Controller had chosen that exactly name as the NGINX one were already being maintained.</p>
<p>On summary the names are quite similar and on a Bag of Words they could be even considered the same, so we need to be alert to not deploy <em>bananas</em> thinking that they are <em>apples</em></p>
]]></content>
        </item>
        
        <item>
            <title>Learning to code and 100 Days Of Code Challenge</title>
            <link>https://hugoprudente.github.io/en/posts/learning-to-code-and-100-days-of-code-challenge/</link>
            <pubDate>Fri, 17 Jan 2020 16:48:29 +0000</pubDate>
            
            <guid>https://hugoprudente.github.io/en/posts/learning-to-code-and-100-days-of-code-challenge/</guid>
            <description>During my career coding was always a strongly present on my roles, and this was always one of my strongest points. Back in the day knowing tools were a little bit more hard, what have caused some wheels to be reinvented like my own in-house Zabbix, master-agent monitoring tool that I even deployed to 500 machines around the whole country (Brazil).
My role was always to consolidate the infrastructure and application and make them work as healthy as possible with less effort as possible as for a really long time the team was &amp;ldquo;me and myself&amp;rdquo;.</description>
            <content type="html"><![CDATA[<p>During my career <code>coding</code> was always a strongly present on my roles, and this was always one of my strongest points. Back in the day knowing tools were a little bit more hard, what have caused some wheels to be reinvented like my own in-house Zabbix, master-agent monitoring tool that I even deployed to 500 machines around the whole country (Brazil).</p>
<p>My role was always to consolidate the infrastructure and application and make them work as healthy as possible with less effort as possible as for a really long time the team was &ldquo;me and myself&rdquo;.</p>
<p>During my journey I have learned, coded, and delivered projects the following programming languages.</p>
<ul>
<li>C</li>
<li>Bash</li>
<li>PHP</li>
<li>JavaScript</li>
<li>Java</li>
<li>C++</li>
<li>Python</li>
<li>.NET</li>
<li>Perl</li>
<li>Python</li>
<li>Android</li>
<li>Ruby</li>
<li>NodeJS</li>
</ul>
<p>And on the last couple years on my actual job I have also included <code>Go</code> and <code>Rust</code> to my knowledge center and kept exercising some of the languages above.</p>
<p>The biggest problem on this is &ldquo;how to keep sharp&rdquo; on the languages when you need them or at least remember enough to not spend a ridiculous amount of time trying to figure out how the basic things works again and I&rsquo;m facing this now, getting back to <code>Java</code>.</p>
<p>My last official project with <code>java</code> was a really long time ago, and as I didn&rsquo;t had any solid project that would take advantage of the language, so <code>java</code> ended on a black hole.</p>
<p>The year changed and I decided to invest more time re-learn <code>java</code>, as it is heavily used by the company and this can give me more broad directions for short and long term on my career goals.</p>
<h3 id="but-how">But how?</h3>
<p>Yes that was the really problem! Organizing time and a routine that could keep me on track and do not jeopardize the other things that I need daily to keep sharp.</p>
<h3 id="100-days-of-code">100 Days Of Code!</h3>
<p>On twitter several of my followers joined the challenge to learn and study a new topic and I tough that it was a really good way to help me improve and create a routine, but I had faced another issue.</p>
<h3 id="what-do-i-do-every-day-to-100-days">What do I do every day to 100 days?</h3>
<p>Yeah, not everyone has projects and ideas that can work, even more if you have an strict contract, so everything needs to be really precise to not create chaos.</p>
<p>So 3 days ago I have created my own <a href="https://github.com/hugoprudente/100-days-of-code">repo</a> and was ready to start, but:</p>
<ul>
<li>What should I code?</li>
<li>How can I get back to the track?</li>
</ul>
<h3 id="the-trick">The trick</h3>
<p>I have added 1 strict rule that is <strong>&ldquo;NO IDE&rdquo;</strong>, yes, the idea is to do <code>java</code> on vim reading the documentation as much as possible, over stack overflow.</p>
<p>As I&rsquo;m really rust I&rsquo;m getting all that I can from the following content providers.</p>
<ul>
<li><a href="https://www.spoj.com/problems/classical/">https://www.spoj.com/problems/classical/</a></li>
<li><a href="https://exercism.io/my/tracks">https://exercism.io/my/tracks</a></li>
<li><a href="https://leetcode.com/">https://leetcode.com/</a></li>
<li><a href="https://www.hackerrank.com/">https://www.hackerrank.com/</a></li>
</ul>
<p>So let&rsquo;s see how it goes! My first commit is up!</p>
<p>See you all later!</p>
<p>#VAIIII</p>
]]></content>
        </item>
        
        <item>
            <title>The Fastest Way to Remove Huge Number of Files</title>
            <link>https://hugoprudente.github.io/en/posts/the-fastest-way-to-remove-huge-number-of-files/</link>
            <pubDate>Fri, 10 Jan 2020 10:38:03 +0000</pubDate>
            
            <guid>https://hugoprudente.github.io/en/posts/the-fastest-way-to-remove-huge-number-of-files/</guid>
            <description>Several year ago, due to a code issue the application that I was working with wrote more than 10 millions files, exhausting all the inodes of the system. Due to that server not having replication at the time I went searching for the golden goose of the file deletion, and ended finding this.
Sadly the original article is not available anymore, but from that time now rsync is my mainly mass destruction tool!</description>
            <content type="html"><![CDATA[<p>Several year ago, due to a code issue the application that I was working with wrote more than 10 millions files, exhausting all the <code>inodes</code> of the system. Due to that server not having replication at the time I went searching for the golden goose of the file deletion, and ended finding this.</p>
<p>Sadly the original article is not available anymore, but from that time now <code>rsync</code> is my mainly mass destruction tool!</p>
<hr>
<h2 id="another-benchmark">Another Benchmark</h2>
<p>Several days ago, <a href="https://www.quora.com/profile/Keith-Winstein">Keith-Winstein</a> replied at the <a href="https://www.quora.com/How-can-someone-rapidly-delete-400-000-files">Quora Posts</a> mentioned that my previous benchmark cannot be reproduced due to the time of all deletion operations lasting too long. To make it clear, those weird data might be that my computer was under heavy load in the past years that it may exist some fs errors during the previous benchmarks. Yet, I am not sure about it. Anyway, I got myself a relatively new rackable computer and did the benchmark again. This time I used <code>/usr/bin/time</code> that offers more detail results. Here is the new result,</p>
<p>(The # of files is 1000000. Each of them has 0 size.)</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Elapsed</th>
<th>System Time</th>
<th>%CPU</th>
<th>cs (Vol/Invol)</th>
</tr>
</thead>
<tbody>
<tr>
<td>rsync -a ‚Äìdelete empty/ a</td>
<td>10.60</td>
<td>1.31</td>
<td>95</td>
<td>106/22</td>
</tr>
<tr>
<td>find b/ -type f -delete</td>
<td>28.51</td>
<td>14.46</td>
<td>52</td>
<td>14849/11</td>
</tr>
<tr>
<td>find c/ -type f | xargs -L 100 rm</td>
<td>41.69</td>
<td>20.60</td>
<td>54</td>
<td>37048/15074</td>
</tr>
<tr>
<td>find d/ -type f | xargs -L 100 -P 100 rm</td>
<td>34.32</td>
<td>27.82</td>
<td>89</td>
<td>929897/21720</td>
</tr>
<tr>
<td>rm -rf f</td>
<td>31.29</td>
<td>14.80</td>
<td>47</td>
<td>15134/11</td>
</tr>
</tbody>
</table>
<h3 id="original-output">Original Output</h3>
<pre tabindex="0"><code># method 1
~/test $ /usr/bin/time -v  rsync -a --delete empty/ a/
        Command being timed: &#34;rsync -a --delete empty/ a/&#34;
        User time (seconds): 1.31
        System time (seconds): 10.60
        Percent of CPU this job got: 95%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.42
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 0
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 0
        Minor (reclaiming a frame) page faults: 24378
        Voluntary context switches: 106
        Involuntary context switches: 22
        Swaps: 0
        File system inputs: 0
        File system outputs: 0
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0

# method 2
        Command being timed: &#34;find b/ -type f -delete&#34;
        User time (seconds): 0.41
        System time (seconds): 14.46
        Percent of CPU this job got: 52%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:28.51
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 0
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 0
        Minor (reclaiming a frame) page faults: 11749
        Voluntary context switches: 14849
        Involuntary context switches: 11
        Swaps: 0
        File system inputs: 0
        File system outputs: 0
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0
# method 3
find c/ -type f | xargs -L 100 rm
~/test $ /usr/bin/time -v ./delete.sh
        Command being timed: &#34;./delete.sh&#34;
        User time (seconds): 2.06
        System time (seconds): 20.60
        Percent of CPU this job got: 54%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:41.69
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 0
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 0
        Minor (reclaiming a frame) page faults: 1764225
        Voluntary context switches: 37048
        Involuntary context switches: 15074
        Swaps: 0
        File system inputs: 0
        File system outputs: 0
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0

# method 4
find d/ -type f | xargs -L 100 -P 100 rm
~/test $ /usr/bin/time -v ./delete.sh
        Command being timed: &#34;./delete.sh&#34;
        User time (seconds): 2.86
        System time (seconds): 27.82
        Percent of CPU this job got: 89%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:34.32
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 0
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 0
        Minor (reclaiming a frame) page faults: 1764278
        Voluntary context switches: 929897
        Involuntary context switches: 21720
        Swaps: 0
        File system inputs: 0
        File system outputs: 0
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0

# method 5
~/test $ /usr/bin/time -v rm -rf f
        Command being timed: &#34;rm -rf f&#34;
        User time (seconds): 0.20
        System time (seconds): 14.80
        Percent of CPU this job got: 47%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:31.29
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 0
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 0
        Minor (reclaiming a frame) page faults: 176
        Voluntary context switches: 15134
        Involuntary context switches: 11
        Swaps: 0
        File system inputs: 0
        File system outputs: 0
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0
</code></pre><h3 id="hardware-specification">Hardware specification</h3>
<pre tabindex="0"><code>Summary:        HP DL360 G7, 2 x Xeon E5620 2.40GHz, 23.5GB / 24GB 1333MHz
Processors:     2 (of 16) x Xeon E5620 2.40GHz (16 cores)
Memory:         23.5GB
Disk:           cciss/c0d0 (cciss0): 300GB (4%) RAID-10
Disk-Control:   cciss0: Hewlett-Packard Company Smart Array G6 controllers, FW 3.66
OS:             RHEL Server 5.4 (Tikanga), Linux 2.6.18-164.el5 x86_64, 64-bit
</code></pre><h2 id="the-original-benchmark">The Original Benchmark</h2>
<p>Yesterday, I saw a very interesting method for deleting huge number of files in a single directory. The method is provided by Zhenyu Lee athttp://www.quora.com/How-can-someone-rapidly-delete-400-000-files
Instead of using find and xargs, Lee ingeniously takes the advantage of rsync that he uses rsync ‚Äìdelete to sync the target directory with an empty directory. Later, I did a comparasion on various method that I&rsquo;ve used. To my surprise, Lee&rsquo;s method is much faster than others. The following is my benchmark,</p>
<table>
<thead>
<tr>
<th>Command</th>
<th># of files</th>
<th>Elapsed</th>
</tr>
</thead>
<tbody>
<tr>
<td>rsync -a ‚Äìdelete empty/ s1</td>
<td>1000000</td>
<td>6m50.638s</td>
</tr>
<tr>
<td>find s2/ -type f -delete</td>
<td>1000000</td>
<td>87m38.826s</td>
</tr>
<tr>
<td>find s3/ -type f | xargs -L 100 rm</td>
<td>1000000</td>
<td>83m36.851s</td>
</tr>
<tr>
<td>find s4/ -type f | xargs -L 100 -P 100 rm</td>
<td>1000000</td>
<td>78m4.658s</td>
</tr>
<tr>
<td>rm -rf s5</td>
<td>1000000</td>
<td>80m33.434s</td>
</tr>
</tbody>
</table>
<h3 id="hardware-specification-1">Hardware Specification</h3>
<pre tabindex="0"><code>CPU: Intel(R) Core(TM)2 Duo CPU E8400 @ 3.00GHz
MEM: 4G
HD: ST3250318AS: 250G/7200RPM
</code></pre><h2 id="footnotes">Footnotes</h2>
<p>[1]: Voluntary Context Switches and Involuntary Context Switches from /usr/bin/time</p>
<p>[2]: As there is pipeline, in order to make an accurate result, practically the command is wrapped by a bash script</p>
<p>Original Post: <a href="http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html">http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html</a></p>
]]></content>
        </item>
        
        <item>
            <title>Sysadmin Devops Tools and Frameworks</title>
            <link>https://hugoprudente.github.io/en/posts/sysadmin-devops-tools-and-frameworks/</link>
            <pubDate>Thu, 05 Dec 2019 02:21:55 +0000</pubDate>
            
            <guid>https://hugoprudente.github.io/en/posts/sysadmin-devops-tools-and-frameworks/</guid>
            <description>How hard is to you SysAdmin/DevOps to keep track of all the tools, platforms and frameworks available on the market?
3 years ago, Jeferson Norona #LinuxTips (VAI), posted on his personal page about a project responsible to gather all those tools and frameworks and consolidate it, to our life of SysAdmins/DevOps easier.
The project was created by Alen Krmelj and it&amp;rsquo;s awesome!
http://sysadmin.it-landscape.info/</description>
            <content type="html"><![CDATA[<p>How hard is to you SysAdmin/DevOps to keep track of all the tools, platforms and frameworks available on the market?</p>
<p>3 years ago, <a href="https://twitter.com/badtux_">Jeferson Norona</a> #LinuxTips (VAI), posted on his personal page about a project responsible to gather all those tools and frameworks and consolidate it, to our life of SysAdmins/DevOps easier.</p>
<p>The project was created by <a href="blackbird.si">Alen Krmelj</a> and it&rsquo;s awesome!</p>
<p><img src="/2019/12/itlandscape.png" alt="itlandscape.png"></p>
<p><a href="http://sysadmin.it-landscape.info/">http://sysadmin.it-landscape.info/</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
